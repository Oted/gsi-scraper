var Domain      = require('domain');
var Lab         = require('lab');
var Plougher    = require('../lib');
var Fs          = require('fs');
var Http        = require("http");

// Test shortcuts
var expect      = Lab.expect;
var before      = Lab.before;
var after       = Lab.after;
var describe    = Lab.experiment;
var it          = Lab.test;

var asosHtml        = Fs.readFileSync(__dirname + '/data/asos.html');
var asosJson        = Fs.readFileSync(__dirname + '/data/asos.json');
var topHtml         = Fs.readFileSync(__dirname + '/data/topshop.html');
var selfridgeHtml   = Fs.readFileSync(__dirname + '/data/selfridge.html');

describe('Plougher', function() {
    before(function(done){
        //json endpoint server
        Http.createServer(function (req, res) {
            res.writeHead(200, {'Content-Type': 'application/json'});

            Fs.readFile(__dirname + req.url, function(err, data) {
                if (err) {
                    res.statusCode = 404;
                    return res.end();
                }
                res.end(data);
            });            
        }).listen(8080, done);
    });
   
    it('should reject parameters', function(done) {
        expect(function(){
            new Plougher().scrape();
        }).to.throw('First parameter must be a valid html or a url');
        done();
    });

    it('should reject an invalid HTML parameter', function(done) {
        expect(function(){
            new Plougher().scrape(asosHtml, null);
        }).to.throw('The second parameter should be a configuration object.');
        done();
    });

    it('should reject an undefined config parameter', function(done) {
        expect(function(){
            new Plougher().scrape("<html></html>", {});
        }).to.throw('Scrape function must be provided with a callback.');
        done();
    });

    it('should provide a constant inside an object', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "name": {
                    "extractor" : "constant",
                    "value" : "hi"
                }   
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product).to.an('object');
            expect(product.name).to.equal('hi');
            done();
        });
    });

    it('should provide a number only', function(done) {
        var config = {
            "extractor" : "constant",
            "value" : 123
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product).to.equal(123);
            done();
        });
    });

    it('should provide a static array inside an object', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "name": {
                    "extractor": "constant",
                    "value": ["1", "2", "3"]
                } 
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product.name).to.an('array');
            expect(product.name.length).to.equal(3);
            done();
        });
    });

    it('should get a dom string', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "name": {
                    "extractor": "dom_string",
                    "path": "div.title span.product_title"
                }   
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product).to.an('object');
            expect(product.name).to.equal('ASOS Cheesecloth Open Sleeve Tunic');
            done();
        });
    });


    it('should get a dom string and strip the html', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "description": {
                    "extractor": "dom_string",
                    "path": "span#product_overview",
                    "strip" : "html"
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product).to.an('object');
            expect(product.description).to.equal(
                'Baggu - BAGGU™ carefully crafts stylish, simple everyday bags with durability and versatility in mind. Fashion and function are flawlessly forged in this basic tote. Its supple pebbled leather exterior makes it sleek, but details like a spacious interior, interior zip pocket, and open top (for easy access to all your things, of course), keep it just as sensible. Not available for in-store returns. Two shoulder straps, unlinedLightweight100% natural milled leather15" height x 10" width x 5.5" depthUSA\r\n                                                Model Info: Model Information is not available.\r\n                                                \r\n                                                Product Code : 1000078663');
            done();
        });
    });

    
    it('should get a dom string using handles', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "object1" : {
                    "extractor" : "dom_object",
                    "keys" : {
                        "object2" : {
                            "extractor": "dom_string",
                            "path": "input#CatwalkInventoryId",
                            "attr": "value"
                        }
                    }
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product).to.an('object');
            expect(product.object1.object2).to.equal('3750440');
            done();
        });
    });


    it('should get a dom string using handles', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "pid": {
                    "extractor": "dom_string",
                    "path": "div.productId"
                },
                "details": {
                    "extractor": "dom_string",
                    "path": "div#details{{pid}}"
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(Fs.readFileSync(__dirname + '/data/selector-handles.html'), 
                        config, 
                        function(err, product) {
            expect(product).to.exist;
            expect(product).to.an('object');
            expect(product.details).to.exist;
            expect(product.details).to.equal('This is a fish');
            done();
        });
    });

    it('should get a dom array of strings', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "images":{
                    "extractor": "dom_array",
                    "path": "div.productImagesItems img.xl",
                    "type": "string",
                    "attr": "src"
                },
                "name" : {
                    "extractor" : "dom_string",
                    "path"      : "div.title span.product_title"
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product).to.be.an('object')
            expect(product.name).to.equal('ASOS Cheesecloth Open Sleeve Tunic');
            expect(product.images).to.exist;
            expect(product.images.length).to.equal(4);
            done();
        });
    });

    it('should get a dom array of urls and filter the ones that 404', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "images": {
                    "extractor": "dom_array",
                    "path": "a.test_404s",
                    "unique" : false,
                    "attr": "href",
                    "filter" : "followable"
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product.images).to.exist;
            expect(product.images.length).to.equal(2);
            done();
        });
    });
  
    it('should get a dom array of urls and filter, but throw error because wrong format', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "name" : {
                    "extractor" : "constant",
                    "value" : "8080/data/topshop.html"
                },
                "images": {
                    "extractor": "dom_array",
                    "path": "a.test_404s",
                    "unique" : false,
                    "attr": "href",
                    "filter" : "contains"
                }
            }
        };
        
        var plougher = new Plougher();
        
        expect(function() {
            plougher.scrape(asosHtml, config, function(err, product){});
        }).to.throw('Invalid format of array-filter-contains');

        done();
    });

    it('should get a dom array of urls and filter the ones that does contain a reference', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "name" : {
                    "extractor" : "constant",
                    "value" : "topshop.html"
                },
                "images": {
                    "extractor": "dom_array",
                    "path": "a.test_404s",
                    "unique" : false,
                    "attr": "href",
                    "filter" : "!contains_{{name}}"
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product.images).to.exist;
            expect(product.images.length).to.equal(1);
            done();
        });
    });


    it('should get a dom array of urls and filter the ones that does not contain a reference', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "name" : {
                    "extractor" : "constant",
                    "value" : "topshop.html"
                },
                "images": {
                    "extractor": "dom_array",
                    "path": "a.test_404s",
                    "unique" : false,
                    "attr": "href",
                    "filter" : "contains_{{name}}"
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product.images).to.exist;
            expect(product.images.length).to.equal(3);
            done();
        });
    });


    it('should get a dom array of strings and find the first one containing image3xl', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "image":{
                    "extractor": "dom_array",
                    "path": "div.productImagesItems img.xl",
                    "type": "string",
                    "attr": "src",
                    "find" : "image3xl"
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product.image).to.exist;
            expect(product.image).to.equal("http://images.asos-media.com/inv/media/0/4/4/0/3750440/image3xl.jpg");
            done();
        });
    });

    it('should get a dom array of strings and find the first one containing .jpg', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "ref" : {
                    "extractor" : "constant",
                    "value" : "image3xl"
                },
                "image":{
                    "extractor": "dom_array",
                    "path": "div.productImagesItems img.xl",
                    "type": "string",
                    "attr": "src",
                    "find" : "{{ref}}"
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product.image).to.exist;
            expect(product.image).to.equal("http://images.asos-media.com/inv/media/0/4/4/0/3750440/image3xl.jpg");
            done();
        });
    });

    it('should get a name and replace the spaces', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "name" : {
                    "extractor" : "dom_string",
                    "path"      : "div.title span.product_title",
                    "functions" : [
                        {
                            "function" : "replace",
                            "parameters" : [" ", ""]
                        }
                    ]
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product.name).to.exist;
            expect(product.name).to.equal('ASOSCheeseclothOpenSleeveTunic');
            
            done();
        });
    });


    it('should get a name and replace the spaces with dot and pop the array', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "name" : {
                    "extractor" : "dom_string",
                    "path"      : "div.title span.product_title",
                    "functions" : [
                        {
                            "function" : "replace",
                            "parameters" : [" ", "."]
                        },
                        {
                            "function" : "split",
                            "parameters" : ["."]
                        },
                        {
                            "function" : "pop"
                        }
                    ]
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product.name).to.exist;
            expect(product.name).to.equal('Tunic');
            
            done();
        });
    });

    it('should get a dom array of strings and flatten them', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "description": {
                    "extractor": "dom_array",
                    "path": "div.product-description ul li ul li",
                    "flatten": true,
                    "join": ". "
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product).to.be.an('object')
            expect(product.description).to.exist;
            expect(product.description).to.equal('Made from 100% pure cotton. Breathable cheesecloth fabric. Elasticated off the shoulder neckline. Relaxed fit.');
            done();
        });
    });

    it('should get a dom array of strings and replace xl with xxl', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "images":{
                    "extractor": "dom_array",
                    "path": "div.productImagesItems img.xl",
                    "replace": {
                        "find": "xl.jpg",
                        "replace": "xxl.jpg"
                    },
                    "attr": "src"
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product).to.be.an('object')
            expect(product.images).to.exist;
            expect(product.images.length).to.equal(4);
            done();
        });
    });

    it('should get an object json_endpoint and return a list of colours, test references', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "pid": {
                    "extractor": "dom_string",
                    "path": "input#CatwalkInventoryId",
                    "attr": "value"
                },
                "colours": {
                    "extractor": "json_endpoint",
                    "request" : {
                        "url": "http://localhost:8080/data/asos.json",
                        "method" : "POST",
                        "gzip"    : true, 
                        "json": "{\"inventoryId\": {{pid}} }"
                    },
                    "mapping": {
                        "type": "array",
                        "path": "d.SizeColours",
                        "mapping": {
                            "type": "string",
                            "path": "Text"
                        }
                    }
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product.colours).to.be.an('array')
            expect(product.colours[0]).to.exist;
            expect(product.colours[0]).to.equal("White");
            done();
        });
    });

    it('test nested objects and references', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "ref" : {
                    "extractor" : "constant",
                    "value" : "ref"
                },
                "related": {
                    "extractor": "dom_array",
                    "path": "div.complete-the-look div.item",
                    "type": "object",
                    "mapping": {
                        "extractor": "dom_object",
                        "keys": {
                            "ref": {
                                "extractor": "reference",
                                "value": "{{ref}}"
                            }
                        }
                    }
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product.related).to.an('array');
            expect(product.related[0]).to.an("object");
            expect(product.related[0].ref).to.equal('ref');
            done();
        });
    });

    it('test nested objects, should return an array of objects', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "related": {
                    "extractor": "dom_array",
                    "path": "div.complete-the-look div.item",
                    "type": "object",
                    "mapping": {
                        "extractor": "dom_object",
                        "keys": {
                            "images": {
                                "extractor": "dom_string",
                                "path": "a.item-link img",
                                "attr": "data-href"
                            },
                            "name": {
                                "extractor": "dom_string",
                                "path": "a.item-link img",
                                "attr": "alt"
                            },
                            "url": {
                                "extractor": "dom_string",
                                "path": "a.item-link",
                                "attr": "href",
                                "prefix": "http://www.asos.com"
                            }
                        }
                    }
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product.related).to.an('array');
            expect(product.related[0]).to.an("object");
            expect(product.related[0].images).to.exist;
            expect(product.related[0].url).to.equal("http://www.asos.com/Asos/Asos-Mix-And-Match-Longline-Bandeau-Bikini-Top-With-Detachable-Strap/Prod/pgeproduct.aspx?iid=2295180&abi=1&clr=white");
            done();
        });
    });

    it('should get name, currency and breadcrumb from script variable', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "breadcrumb" : {
                    "extractor" : "dom_script",
                    "start_string" : "window.universal_variable",
                    "mapping" : {
                        "type" : "array",
                        "path" : "page.breadcrumb" 
                    }
                },
                "name": {
                    "extractor" : "dom_script",
                    "start_string" : "window.universal_variable",
                    "mapping": {
                        "type": "string",
                        "path": "product.name",
                    }
                }
            }
        };
   
        var plougher = new Plougher();
        plougher.scrape(topHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product.name).to.equal('MOTO Black Baxter Jeans');
            expect(product.breadcrumb).to.an("array");
            
            done();
        });
    });


    it('should get a dom string and follow the url, then get the name from a script', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "pid": {
                    "extractor": "dom_string",
                    "path": "a#test_link",
                    "attr" : "href",
                    "follow" : true,
                    "mapping" : {
                        "extractor" : "dom_script",
                        "start_string" : "window.universal_variable",
                        "mapping" : {
                            "type" : "array",
                            "path" : "page.breadcrumb"
                        }
                    }
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product.pid).to.an('array');
            
            done();
        });
    });


    it('should get data from a script variuable with invalid characrets which has to be removed', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "price" : {
                    "extractor" : "dom_script",
                    "start_string" : "window.universal_variable",
                    "mapping" : {
                        "type" : "number",
                        "path" : "product.unit_price"
                    }
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(selfridgeHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product.price).to.an('number');
            expect(product.price).to.equal(68.00);
            
            done();
        });
    });


    it('should get a dom string and follow the url, then get the name from a href', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "pid": {
                    "extractor": "dom_string",
                    "path": "a#test_link",
                    "attr" : "href",
                    "follow" : true,
                    "mapping" : {
                        "extractor": "dom_string",
                        "path": "a#test_endpoint_url",
                        "attr" : "href"
                    }
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(Fs.readFileSync(__dirname + '/data/asos.html'), config, 
                            function(err, product) {
            expect(product).to.exist;
            expect(product.pid).to.equal('this is the endpoint');
            
            done();
        });
   });

    it('should get a dom string and follow the url, then get the an object', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "pid": {
                    "extractor": "dom_string",
                    "path": "a#test_link",
                    "attr" : "href",
                    "follow" : true,
                    "mapping" : {
                        "extractor": "dom_object",
                        "keys" : {
                            "pid" : {
                                "extractor": "dom_string",
                                "path": "a#test_endpoint_url",
                                "attr" : "href"
                            },
                            "pid2" : {
                                "extractor": "dom_string",
                                "path": "a#test_endpoint_url",
                                "attr" : "href"
                            } 
                        }
                    }
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(Fs.readFileSync(__dirname + '/data/asos.html'), config, function(err, product) {
            expect(product).to.exist;
            expect(product.pid.pid).to.equal('this is the endpoint');
            expect(product.pid.pid2).to.equal('this is the endpoint');
            
            done();
        });
    });

    it('should get a dom string through a fallback mapping', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "pid": {
                    "try" : [ 
                        {
                            "extractor": "dom_string",
                            "path": "a#test_endpoint_url",
                            "attr" : "href"
                        },
                        {
                            "extractor": "dom_string",
                            "path": "a#sdfsdfsftest_endpoint_url",
                            "attr" : "href"
                        },
                        {
                            "extractor": "dom_string",
                            "path": "a#test_endpoinisdsd_url",
                            "attr" : "href"
                        }
                    ]
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(Fs.readFileSync(__dirname + '/data/topshop.html'), config, 
                        function(err, product) {
            expect(product).to.exist;
            expect(product.pid).to.equal('this is the endpoint');
            
            done();
        });
    });
    
    it('should get a dom array of strings from third try', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "images":{
                    "try" : [
                        {
                            "extractor": "dom_array",
                            "path": "div.productImagesItems img.xlsdsd",
                            "type": "string",
                            "attr": "src"
                        },
                        {
                            "extractor": "dom_array",
                            "path": "div.productImagesItems img.xlkkk",
                            "type": "string",
                            "attr": "src"
                        }, 
                        {
                            "extractor": "dom_array",
                            "path": "div.productImagesItems img.xl",
                            "type": "string",
                            "attr": "src"
                        } 
                    ]
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product).to.exist;
            expect(product).to.be.an('object');
            expect(product.images).to.exist;
            expect(product.images.length).to.equal(4);
            done();
        });
    });

    it('should try to get domstring, then go to fallback and get it with follow', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "test": {
                    "try" : [
                        {
                            "extractor": "dom_string",
                            "path": "a#test_esdsdsdndpoint_url",
                            "attr" : "href"
                        },
                        {
                            "extractor": "dom_string",
                            "path": "a#test_link",
                            "attr" : "href",
                            "follow" : true,
                            "mapping" : {
                                "extractor": "dom_string",
                                "path": "a#test_endpoint_url",
                                "attr" : "href"
                            }
                        }
                    ]
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(Fs.readFileSync(__dirname + '/data/asos.html'), config,
                function(err, product) {
            expect(product).to.exist;
            expect(product.test).to.equal('this is the endpoint');
            
            done();
        });
    });
    
    it('should get an array of links and follow them, should end up with an array of strings', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "stock": {
                    "extractor": "dom_array",
                    "path": "li.square a",
                    "attr" : "href",
                    "follow" : true,
                    "mapping" : {
                        "extractor" : "dom_script",
                        "start_string" : "window.universal_variable",
                        "mapping": {
                            "type": "string",
                            "path": "product.color"
                        }
                    }
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(Fs.readFileSync(__dirname + '/data/allsaints1.html'), config,
                function(err, product) {
            
                    expect(product.stock).to.exist;
            expect(product.stock.length).to.equal(2);
            expect(product.stock[0]).to.equal('Indigo');
            done();
        });
    });

    it('should get an array of links where one is invalid and try follow them', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "stock": {
                    "extractor": "dom_array",
                    "path": "li.square a",
                    "attr" : "href",
                    "follow" : true,
                    "mapping" : {
                        "extractor" : "dom_script",
                        "start_string" : "window.universal_variable",
                        "mapping": {
                            "type": "string",
                            "path": "product.color"
                        }
                    }
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(Fs.readFileSync(__dirname + '/data/allsaints4.html'), config,
                function(err, product) {
            expect(product.stock).to.exist;
            expect(product.stock.length).to.equal(2);
            expect(product.stock[1]).to.equal(undefined);
            done();
        });
    });


    it('should get an array of links and follow them, should end up with an array of objects with an id', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "stock": {
                    "extractor": "dom_array",
                    "path": "li.square a",
                    "attr" : "href",
                    "follow" : true,
                    "mapping" : {
                        "extractor": "dom_object",
                        "keys" : {
                            "_id" : {
                                "extractor" : "dom_script",
                                "start_string" : "window.universal_variable",
                                "mapping": {
                                    "type": "string",
                                    "path": "product.color"
                                }
                            }
                        }
                    }
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(Fs.readFileSync(__dirname + '/data/allsaints1.html'), config,
                function(err, product) {
            expect(product.stock).to.exist;
            expect(product.stock.length).to.equal(2);
            expect(product.stock[0]._id).to.exist;
            expect(product.stock[0]._id).to.equal('Indigo');
            done();
        });
    });

    it('should get an array of links and follow them, should end up with an array of objects with an id and an image', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "stock": {
                    "extractor": "dom_array",
                    "path": "li.square a",
                    "attr" : "href",
                    "follow" : true,
                    "mapping" : {
                        "extractor": "dom_object",
                        "keys" : {
                            "_id" : {
                                "extractor" : "dom_script",
                                "start_string" : "window.universal_variable",
                                "mapping": {
                                    "type": "string",
                                    "path": "product.color"
                                }
                            },
                            "images" : {
                                "extractor": "dom_array",
                                "path" : "div.image-list img.adaptive",
                                "type": "string",
                                "attr" : "src"
                            }
                        }
                    }
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(Fs.readFileSync(__dirname + '/data/allsaints1.html'), config,
                function(err, product) {
            expect(product.stock).to.exist;
            expect(product.stock.length).to.equal(2);
            expect(product.stock[0]._id).to.exist;
            expect(product.stock[0]._id).to.equal('Indigo');
            expect(product.stock[1]._id).to.exist;
            expect(product.stock[1]._id).to.equal('Black/Grey');
            expect(product.stock[1].images.length).to.equal(3);
            done();
        });
    });

    it('should use follow featue with add-current flag', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "stock": {
                    "extractor": "dom_array",
                    "path": "li.square a",
                    "attr" : "href",
                    "follow" : true,
                    "add_current" : true,
                    "mapping" : {
                        "extractor": "dom_object",
                        "keys" : {
                            "_id" : {
                                "extractor" : "dom_script",
                                "start_string" : "window.universal_variable",
                                "mapping": {
                                    "type": "string",
                                    "path": "product.color"
                                }
                            },
                            "images" : {
                                "extractor": "dom_array",
                                "path" : "div.image-list img.adaptive",
                                "type": "string",
                                "attr" : "src"
                            }
                        }
                    }
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(Fs.readFileSync(__dirname + '/data/allsaints1.html'), config,
                function(err, product) {
            expect(product.stock).to.exist;
            expect(product.stock.length).to.equal(3);
            expect(product.stock[0]._id).to.equal('Grey');
            expect(product.stock[1]._id).to.equal('Indigo');
            expect(product.stock[2]._id).to.equal('Black/Grey');
            expect(product.stock[0].images.length).to.equal(3);
            expect(product.stock[2].images.length).to.equal(3);
            done();
        });
    });

    it('should use conditionals and throw error', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "equals" : {
                    "type" : "eq",
                    "conditions" : [
                        {
                            "extractor": "dom_string",
                            "path": "a#test_endpoint_url",
                            "attr" : "href"
                        }
                    ],
                    "true" : {
                        "extractor" : "constant",
                        "value" : "yes"
                    }, 
                    "false" : {
                        "extractor" : "constant",
                        "value" : "no"
                    }
                },
                "test" : {
                    "extractor" : "constant",
                    "value" : "test"
                }
            }
        };
        var plougher = new Plougher();
        
        expect(function() {
            plougher.scrape(topHtml, config, function(err, product){});
        }).to.throw('There must be at least two conditions');
    
        done();
    });

    it('should use conditionals to tell if all results are equal', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "equals" : {
                    "type" : "eq",
                    "conditions" : [
                        {
                            "extractor": "dom_string",
                            "path": "a#test_endpoint_url",
                            "attr" : "href"
                        },
                        {
                            "extractor": "dom_string",
                            "path": "a#test_endpoint_url",
                            "attr" : "href"
                        },
                        {
                            "extractor": "dom_string",
                            "path": "a#test_endpoint_url",
                            "attr" : "href"
                        }
                    ],
                    "true" : {
                        "extractor" : "constant",
                        "value" : "yes"
                    }, 
                    "false" : {
                        "extractor" : "constant",
                        "value" : "no"
                    }
                },
                "test" : {
                    "extractor" : "constant",
                    "value" : "test"
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(topHtml, config, function(err, product) {
            expect(product.equals).to.exist;
            expect(product.equals).to.equal('yes');
            expect(product.test).to.equal('test');
            done();
        });
    });

    it('should use conditionals to tell if a link is followable', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "test" : {
                    "type" : "followable",
                    "conditions" : [
                        {
                            "extractor": "dom_string",
                            "path": "a#test_link",
                            "attr" : "href"
                        }
                    ],
                    "true" : {
                        "extractor" : "constant",
                        "value" : "yes"
                    }, 
                    "false" : {
                        "extractor" : "constant",
                        "value" : "no"
                    }
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product.test).to.exist;
            expect(product.test).to.equal('yes');
            done();
        });
    });

    it('should use conditionals to tell if a link is followable', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "test" : {
                    "type" : "followable",
                    "conditions" : [
                        {
                            "extractor": "dom_string",
                            "path": "a#test_404",
                            "attr" : "href"
                        }
                    ],
                    "true" : {
                        "extractor" : "constant",
                        "value" : "yes"
                    }, 
                    "false" : {
                        "extractor" : "constant",
                        "value" : "no"
                    }
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(asosHtml, config, function(err, product) {
            expect(product.test).to.exist;
            expect(product.test).to.equal('no');
            done();
        });
    });


   it('should use conditionals to tell if result contains a word', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "test" : {
                    "type" : "contains",
                    "conditions" : [
                        {
                            "extractor": "dom_string",
                            "path": "a#test_endpoint_url",
                            "attr" : "href"
                        },
                        {
                            "extractor" : "constant",
                            "value" : "this"
                        }
                    ],
                    "true" : {
                        "extractor" : "constant",
                        "value" : "yes"
                    }, 
                    "false" : {
                        "extractor" : "constant",
                        "value" : "no"
                    }
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(topHtml, config, function(err, product) {
            expect(product.test).to.exist;
            expect(product.test).to.equal('yes');
            done();
        });
    });

    it('should use conditionals to tell if two numbers are less', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "equals" : {
                    "type" : "lt",
                    "conditions" : [
                        {
                            "extractor": "dom_string",
                            "path": "a#number1"
                        },
                        {
                            "extractor": "dom_string",
                            "path": "a#number2"
                        }
                    ],
                    "true" : {
                        "extractor" : "dom_script",
                        "start_string" : "window.universal_variable",
                        "mapping": {
                            "type": "string",
                            "path": "product.name",
                        }
                    }, 
                    "false" : {
                        "extractor" : "constant",
                        "value" : "higher"
                    }
                },
                "test" : {
                    "extractor" : "constant",
                    "value" : "test"
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(topHtml, config, function(err, product) {
            expect(product.equals).to.exist;
            expect(product.equals).to.equal('MOTO Black Baxter Jeans');
            done();
        });
    });


    it('should use conditionals to tell if 3 or more numbers are less than eachother in order', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "equals" : {
                    "type" : "lt",
                    "conditions" : [
                        {
                            "extractor": "dom_string",
                            "path": "a#number1"
                        },
                        {
                            "extractor": "dom_string",
                            "path": "a#number2"
                        },
                        {
                            "extractor": "dom_string",
                            "path": "a#number3"
                        }
                    ],
                    "true" : {
                        "extractor" : "dom_script",
                        "start_string" : "window.universal_variable",
                        "mapping": {
                            "type": "string",
                            "path": "product.name",
                        }
                    }, 
                    "false" : {
                        "extractor" : "constant",
                        "value" : "no"
                    }
                },
                "test" : {
                    "extractor" : "constant",
                    "value" : "test"
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(topHtml, config, function(err, product) {
            expect(product.equals).to.exist;
            expect(product.equals).to.equal('no');
            done();
        });
    });

    it('should use conditionals to tell if numbers are greater than', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "equals" : {
                    "type" : "gt",
                    "conditions" : [
                        {
                            "extractor": "dom_string",
                            "path": "a#number1"
                        },
                        {
                            "extractor": "dom_string",
                            "path": "a#number2"
                        }                    
                    ],
                    "true" : {
                        "extractor" : "constant",
                        "value" : "yes"
                    }, 
                    "false" : {
                        "extractor" : "constant",
                        "value" : "no"
                    }
                },
                "test" : {
                    "extractor" : "constant",
                    "value" : "test"
                }
            }
        };

        var plougher = new Plougher();
        plougher.scrape(topHtml, config, function(err, product) {
            expect(product.equals).to.exist;
            expect(product.equals).to.equal('no');
            done();
        });
    });

    it('test basic switch statement', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "colour" : {
                    'target': {
                        'extractor': 'dom_string',
                        'path': 'li.product_colour span'
                    },
                    'switch': [
                        {
                            'value': "SOMETHING",
                            'mapping': {
                                'extractor': 'constant',
                                'value': 1
                            }
                        },
                        {
                            'value': "ASSORTED",
                            'mapping': {
                                'extractor': 'constant',
                                'value': 0
                            }
                        }
                    ]
                }
            }
        };

                    
        var plougher = new Plougher();
        plougher.scrape(selfridgeHtml, config, function(err, product) {
            expect(product.colour).to.exist;
            expect(product.colour).to.equal(0);
            done();
        });
    });


    it('test more complex switch statement', function(done) {
        var config = {
            "extractor": "dom_object",
            "keys": {
                "quantity" : {
                    "extractor": "dom_array",
                    "path": "select#product_size_full option[title]",
                    "type": "object",
                    "mapping": {
                        'target': {
                            'extractor': 'dom_string',
                            'path': '',
                            'attr' : 'title'
                        },
                        'switch': [
                            {
                                'value': "In stock",
                                'mapping': {
                                    'extractor': 'constant',
                                    'value': 10
                                }
                            },       
                            {
                                'value': "Low stock",
                                'mapping': {
                                    'extractor': 'constant',
                                    'value': 5
                                }
                            },
                            {
                                'value': "Out of stock",
                                'mapping': {
                                    'extractor': 'constant',
                                    'value': 0
                                }
                            }
                        ]
                    }
                }
            }
        };
                    
        var plougher = new Plougher();
        plougher.scrape(selfridgeHtml, config, function(err, product) {
            expect(product.quantity).to.exist;
            expect(product.quantity[0]).to.equal(0);
            done();
        });
    });
});
