var Utils = require('./utils');

function DomStringScraper(_variables) {
    this._variables = _variables;
};

/**
 *  Handles the string type scraping, also calls processString and followUrl 
 */
DomStringScraper.prototype.scrape = function(config, done) {
    if (!config) {
        console.error('No config provided');
        return done();
    }

    var $ = this._variables.$,
        value;
    
    if (!config.path) {
        config.path = "";
    } else {
        config.path = config.path.replace(/\{\{(.*)\}\}/g, Utils.reachForValue.bind(this));
    }

    if (!config.path) {
        if (config.attr) {
            value = $($).attr(config.attr);
        } else {
            value = $($).text();
        }

        //if suffix of prefix is a reference, get the value
        if (config.suffix && config.suffix.indexOf('}}') > -1) {
            config.suffix = Utils.reachForValue.call(that, config.suffix);
        }

        if (config.prefix && config.prefix.indexOf('}}') > -1) {
            config.prefix = Utils.reachForValue.call(that, config.prefix);
        }

        value = Utils.processStringValue(config, value);
        
        return done(null, value);
    }

    
    //get the result in the root object, then reach for the value and replaces any handles on the result 
    if (config.attr) {
        value = $(config.path).attr(config.attr);
    } else {
        value = $(config.path).text();
    }

    //if suffix of prefix is a reference, get the value
    if (config.suffix && config.suffix.indexOf('}}') > -1) {
        config.suffix = Utils.reachForValue.call(that, config.suffix);
    }

    if (config.prefix && config.prefix.indexOf('}}') > -1) {
        config.prefix = Utils.reachForValue.call(that, config.prefix);
    }


    value = Utils.processStringValue(config, value);
    
    return done(null, value);
};

module.exports = exports = DomStringScraper;
