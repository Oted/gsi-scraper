var Hoek        = require('hoek');
var Utils       = require('./utils');
var _           = require("underscore");
var json5       = require('json5');
var internals   = {};

function DomScriptScraper(_variables) {
    this._variables = _variables;
};

/**
 *  If the cache wasn't found, iterate all scripts and try to find the start matching string.
 *  If the end string exists, match until then, otherwise until the end of the script.
 */
DomScriptScraper.prototype.scrape = function(config, done) {
    if (!config) {
        console.error('No confi provided');
        return done();
    }

    //cheerio object and cache must come from the root object 
    //and should always be available even when the scope has changed
    var path            = config.path || "script",
        root_variables  = Utils.getRootVariables(this._variables),
        $               = root_variables.$,
        cache           = root_variables.scriptCache,
        json;
   
    //check cache 
    if (cache[config.start_string]) {
        json = Utils.mapJsonResponse(config._parent, config.mapping, cache[config.start_string]);
        if (json) return done(null, json);
    }

    //else get the stuff and stpre it
    $(path).each(function(item) {
        var text = $(this).text(),
            start_string_index = text.indexOf(config.start_string),
            end_string_index = text.length - 1,
            matchedText;
      
        //if start string was not found, return  
        if (start_string_index === -1) {
            return;
        }
       
        //otherwise move pointer to the end of the matched string
        start_string_index += config.start_string.length;
        
        //if a given end string matches, move the end cursor to it
        if (config.end_string && text.indexOf(config.end_string) > -1) {
            end_string_index = text.indexOf(config.end_string);
        }
                
        //get the parsed string and put it through the trimmer
        matchedText = Utils.trimBeforeParse(text.substring(start_string_index, end_string_index));
        
        if (!config.mapping) {
            return done(null, matchedText);
        };

        //try to parse the matched string
        try {
            json = json5.parse(matchedText);
        } catch (err) {
            if (err.message.indexOf('Unexpected') === 0) {
                var tryToReplace = err.message.toString().replace('Unexpected', '').trim().replace(/\'/g, '');
                matchedText = matchedText.split(tryToReplace).join("");
                try {
                    json = json5.parse(matchedText);
                } catch (err) {
                    return done(err); 
                }
            } else {
                return done(err);
            }
        }
    });
    
    //add it to the cache
    cache[config.start_string] = json;
  
    json = Utils.mapJsonResponse(this._variables, config.mapping, json);
    done(null, json);
};

module.exports = exports = DomScriptScraper;
